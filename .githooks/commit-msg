#!/usr/bin/env node

/**
 * Git commit message validator for Angular Conventional Commits
 * This hook validates commit messages follow the conventional commits standard
 */

const fs = require('fs');
const path = require('path');

// Get commit message from the file passed as argument
const commitMsgFile = process.argv[2];
const commitMessage = fs.readFileSync(commitMsgFile, 'utf8').trim();

// Skip validation for merge commits, revert commits, and fixup commits
if (
  commitMessage.match(/^Merge /) ||
  commitMessage.match(/^Revert /) ||
  commitMessage.match(/^fixup! /) ||
  commitMessage.match(/^squash! /)
) {
  process.exit(0);
}

// Conventional Commits regex pattern
const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?!?:\s.+$/;

// Breaking change pattern
const breakingChangeRegex = /BREAKING CHANGE:/;

// Validate basic format
if (!conventionalCommitRegex.test(commitMessage)) {
  console.error('‚ùå Invalid commit message format!');
  console.error('');
  console.error('The commit message must follow the Conventional Commits standard:');
  console.error('');
  console.error('Format: <type>(<scope>): <description>');
  console.error('');
  console.error('Types:');
  console.error('  feat:     A new feature');
  console.error('  fix:      A bug fix');
  console.error('  docs:     Documentation only changes');
  console.error('  style:    Changes that do not affect the meaning of the code');
  console.error('  refactor: A code change that neither fixes a bug nor adds a feature');
  console.error('  test:     Adding missing tests or correcting existing tests');
  console.error('  chore:    Changes to the build process or auxiliary tools');
  console.error('  perf:     A code change that improves performance');
  console.error('  ci:       Changes to CI configuration files and scripts');
  console.error('  build:    Changes that affect the build system or dependencies');
  console.error('  revert:   Reverts a previous commit');
  console.error('');
  console.error('Scope (optional): The part of the codebase affected (e.g., packages/asciidoc)');
  console.error('');
  console.error('Examples:');
  console.error('  feat(packages/asciidoc): add syntax highlighting support');
  console.error('  fix(apps/docs): resolve mobile navigation issue');
  console.error('  docs(templates/astro-minimal): update installation guide');
  console.error('  chore(root): update dependencies');
  console.error('');
  console.error('For monorepo, use scope pattern: (folder/component)');
  console.error('  - packages/asciidoc');
  console.error('  - apps/docs');
  console.error('  - templates/astro-minimal');
  console.error('');
  console.error('Your commit message:');
  console.error(`  "${commitMessage}"`);
  process.exit(1);
}

// Extract type and scope
const match = commitMessage.match(/^([^(]+)(\(([^)]+)\))?!?:\s(.+)$/);
const type = match[1];
const scope = match[3];
const description = match[4];

// Validate scope format for monorepo
if (scope) {
  const validScopePattern = /^(packages|apps|templates|tools|shared)\/[\w-]+$|^root$|^[\w-]+$/;
  
  if (!validScopePattern.test(scope)) {
    console.error('‚ùå Invalid scope format!');
    console.error('');
    console.error('For monorepo commits, use the pattern: (folder/component)');
    console.error('');
    console.error('Valid examples:');
    console.error('  - (packages/asciidoc)');
    console.error('  - (apps/docs)');
    console.error('  - (templates/astro-minimal)');
    console.error('  - (tools/scripts)');
    console.error('  - (shared/types)');
    console.error('  - (root) for root-level changes');
    console.error('');
    console.error(`Your scope: "${scope}"`);
    process.exit(1);
  }
}

// Validate description
if (description.length < 3) {
  console.error('‚ùå Commit description too short!');
  console.error('The description must be at least 3 characters long.');
  console.error(`Your description: "${description}" (${description.length} characters)`);
  process.exit(1);
}

if (description.length > 72) {
  console.error('‚ö†Ô∏è  Warning: Commit description is quite long!');
  console.error('Consider keeping the first line under 72 characters.');
  console.error(`Your description: ${description.length} characters`);
  console.error('');
  console.error('You can add more details in the commit body (separate with a blank line).');
}

// Validate description doesn't end with period
if (description.endsWith('.')) {
  console.error('‚ùå Commit description should not end with a period!');
  console.error(`Your description: "${description}"`);
  process.exit(1);
}

// Validate description starts with lowercase (except for proper nouns)
if (description.charAt(0) !== description.charAt(0).toLowerCase()) {
  const properNouns = ['README', 'API', 'URL', 'HTML', 'CSS', 'JS', 'TS', 'TSX', 'JSX', 'JSON', 'XML', 'HTTP', 'HTTPS', 'NPM', 'PNPM', 'CI', 'CD'];
  const firstWord = description.split(' ')[0];
  
  if (!properNouns.includes(firstWord)) {
    console.error('‚ùå Commit description should start with lowercase!');
    console.error(`Your description: "${description}"`);
    console.error('Exception: Proper nouns like README, API, etc. are allowed');
    process.exit(1);
  }
}

// Check for breaking changes
const hasBreakingChange = commitMessage.includes('!:') || breakingChangeRegex.test(commitMessage);

if (hasBreakingChange) {
  console.log('üî• Breaking change detected!');
  console.log('Make sure to document the breaking change in the commit body or PR description.');
}

// Success
console.log('‚úÖ Commit message follows Conventional Commits standard!');
console.log(`   Type: ${type}`);
if (scope) {
  console.log(`   Scope: ${scope}`);
}
console.log(`   Description: ${description}`);
if (hasBreakingChange) {
  console.log('   üî• Breaking Change: Yes');
}

process.exit(0);
