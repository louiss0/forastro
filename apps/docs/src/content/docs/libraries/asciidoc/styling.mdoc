---
title: Styling
description: "The page about styling blog pages and syntax highlighting"
---

When using `@forastro/asciidoc` The HTML that is extracted from each page is below the `<body>`.
This means that they are unstyled by default. Which means you must bring your own stylesheet.
When it comes to supporting styles. TailwindCSS and UnoCSS are supported.

## TailwindCSS

To use TailwindCSS all you need to do is import the `tailwindAsciidocTypography` from `@forastro/asciidoc/tailwind`. Into your tailwind config file.

```ts
import { tailwindAsciidocTypography } "@forastro/asciidoc/tailwind"

export default {
    plugins: [
        tailwindAsciidocTypography
    ]
}

```

{% aside
   type="caution"
   title="This plugin is different from the normal TailwindCSS typography plugin." %}
- Its not configurable
- The .prose sizing classes only decide the max-size of the blog
- It uses responsive scaling based on UtopiaFYI
- No colors are supported other than the grays supported by TailwindCSS
- The styles are adjusted for asciidoc not normal tailwind typography users.
{% /aside %}

## UnoCSS

To use UnoCSS all you need to do is import the `presetAsciidocTypography` from `@forastro/asciidoc/unocss`. Into your unocss config file.

```ts
import { presetAsciidocTypography } "@forastro/asciidoc/unocss"

export default {
    plugins: [
        presetAsciidocTypography
    ]
}

```

{% aside
   type="caution"
   title="This plugin is different from the normal UnoCSS typography plugin." %}
- Its not configurable
- It uses responsive scaling based on UtopiaFYI
- The styles are adjusted for asciidoc not normal unocss typography users.
{% /aside %}

## Syntax highlighting

{% aside type="caution" %}
When it comes to Syntax Highlighting.
This library doesn't allow the use of any built in asciidoc.
They conflict with the way HTML is rendered.
{% /aside %}

Instead the highlighters that are supported are Shiki and Prism.
Both of them must be activated by creating an asciidoc config file.
You use the global `attributes.sourceHighlighter:` to set the highlighter in the config object.

### Shiki

To configure Shiki you set the `attributes.sourceHighlighter` to `shiki`.
When you do you can configure the theme by doing `attributes.shikiTheme`.
You will be forced to do a light and dark mode theme.
When using it all languages are enabled.
The names must be different.

```ts
   export default {
        attributes: {
            sourceHighlighter: "shiki",
            shikiTheme: {
                light: "nord",
                dark: "dracula"
            }
        }

   }
```

{% aside type="caution" %}
When it comes to Shiki there are no transforms.
{% /aside %}

### Prism

To configure Shiki you set the `attributes.sourceHighlighter` to `prism`.
When you do you can configure the languages by doing `attributes.prismLanguages`.

```ts
   export default {
        attributes: {
            sourceHighlighter: "prism",
            prismLanguages: ["clike", "toml"] 
        }

   }
```

{% aside
   type="note"
   title="By default these are the languages that are enabled by prism:" %}
- html
- xml
- css
- javascript
- typescript
- markdown
- yaml
- json
- jsx
- tsx
- asciidoc
- bash
- php
- git
{% /aside %}

{% aside type="caution" %}
You must bring your own stylesheets
Themes may be supported in the future.
{% /aside %}
