---
import { Icon } from "astro-icon";
import type { HTMLAttributes } from "astro/types";

type Button = HTMLAttributes<"button">;
type Props = {
  elementToScrollToId: string;
  id: string;
  onclick?: never;
} & Button;

const { id, elementToScrollToId } = Astro.props;
---

<div position-box class="fixed bottom-8 right-8">
  <button
    id={id}
    data-element="floating-button"
    class="group hidden"
    aria-label="Go to top of screen"
  >
    <div
      class="transition-transform duration-150 ease-in group-hover:scale-105 group-focus:scale-105"
    >
      <Icon name="ic:round-arrow-circle-up" class="w-8 md:w-12 xl:w-16" />
    </div>
  </button>
</div>

<script define:vars={{ id, elementToScrollToId }}>
  const button = document.body.querySelector(`#${id}`);
  const elementToScrollTo = document.body.querySelector(
    `#${elementToScrollToId}`
  );
  const classUsedToControlFloatingButtonApperance = "hidden";

  if (!button || !elementToScrollTo) {
    throw Error(
      "Please add the right id's one for the elementToScrollTo one for the button"
    );
  }

  const elementToScrollToObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          if (
            button.classList.contains(classUsedToControlFloatingButtonApperance)
          ) {
            button.classList.remove(classUsedToControlFloatingButtonApperance);
          }
        } else {
          button.classList.add(classUsedToControlFloatingButtonApperance);
        }
      });
    },
    {
      threshold: 0.25,
    }
  );

  elementToScrollToObserver.observe(elementToScrollTo);

  button.addEventListener("click", () => {
    elementToScrollTo.scrollIntoView();
  });
</script>
