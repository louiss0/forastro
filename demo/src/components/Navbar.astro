---
import { DefineTemplate } from "@forastro/utilities";
import { For } from "@forastro/flow";
import Projector from "packages/utilities/src/lib/components/Projector.astro";

class LinkSet {
  constructor(
    public readonly name: string,
    public readonly links: Array<string>
  ) {}
}

const pageNames = [
  new LinkSet("libraries", ["flow", "utilities"]),
  new LinkSet("templates", ["minimal", "vue-template"]),
  new LinkSet("extensions", ["snippets"]),
];
---

<script>
  const dropdownButtons = document.body.querySelectorAll<HTMLButtonElement>(
    "[data-element='dropdown-button']"
  );
  const presenceWrapperSelector = "[data-wrapper='presence']";

  const presenceWrappersInDropdownButtons =
    document.body.querySelectorAll<HTMLDivElement>(
      `[data-element='dropdown-button'] ${presenceWrapperSelector}`
    );

  const classToControlWhetherAnElementIsHiddenOrNot = "hidden";

  dropdownButtons.forEach((dropdownButton) =>
    dropdownButton.addEventListener("click", (event) => {
      const noCurrentTarget = !event.currentTarget;

      const currentTargetIsNotInstanceOFButtonElement = !(
        event.currentTarget instanceof HTMLButtonElement
      );

      const noCurrentTargetOrThereIsOnsButItsNotAButton =
        noCurrentTarget ||
        (event.currentTarget && currentTargetIsNotInstanceOFButtonElement);

      if (noCurrentTargetOrThereIsOnsButItsNotAButton) {
        return;
      }

      presenceWrappersInDropdownButtons.forEach((presenceWrapper) =>
        presenceWrapper.classList.add("hidden")
      );

      const presenceElement = event.currentTarget.querySelector(
        presenceWrapperSelector
      );

      if (!presenceElement) {
        throw new Error(
          `This element ${presenceWrapperSelector} is supposed to exist`
        );
      }

      presenceElement.classList.remove(
        classToControlWhetherAnElementIsHiddenOrNot
      );
    })
  );
</script>

<DefineTemplate templateName={"link-with-dropdown"}>
  {
    ({ links, name }: LinkSet) => {
      return (
        <button data-element="dropdown-button" class="px-6 py-4 relative group">
          <div class="capitalize">{name.replace("-", " ")}</div>
          <div data-wrapper="presence" class="hidden">
            <div data-wrapper="position" class="absolute top-full left-1/4 ">
              <div
                data-element="dropdown-menu"
                class="text-sm  bg-gray-300 rounded-sm"
              >
                <div data-content class="w-24">
                  {links.map((link) => (
                    <a href={`/${name}/${link}`}>
                      <div class="px-4 py-2">{link}</div>
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </button>
      );
    }
  }
</DefineTemplate>

<nav class="px-6 py-2 isolate">
  <div data-content class="sm:flex sm:justify-between sm:items-center">
    <a class="hidden sm:inline-block" href="/">
      <div data-content class="px-6 py-2 text-xl font-bold">For Astro</div>
    </a>
    <div class="grid text-center sm:flex gap-6">
      <For of={pageNames}>
        {
          (value) => (
            <Projector templateName="link-with-dropdown" context={[value]} />
          )
        }
      </For>
    </div>
  </div>
</nav>
