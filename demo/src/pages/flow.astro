---
import Demo from "demo/src/layouts/Demo.astro";

import { For, Show, Hide, Range, Switch } from "@forastro/flow";
import Container from "demo/src/components/Container.astro";
import IterationInfoTable from "demo/src/components/IterationInfoTable.astro";
import Center from "demo/src/components/Center.astro";
import Section from "demo/src/components/Section.astro";
const names = ["Nick", "Kepano"];
import { Code } from "astro/components";
import Case from "packages/flow/src/lib/components/Case.astro";
import type { IterationInfo } from "@forastro/utilities";
---

<Demo
  title="Flow"
  sidebarTitle="Flow"
  sidebarLinks={["for", "show", "hide", "range", "switch-and-case"]}
  description="This is the page for all flow components based things"
>
  <Section title={"for"}>
    <div data-content class="grid gap-6">
      <Container>
        <div class="grid gap-6" data-content>
          <p>
            The {`<For />`} component is a component that allows the user to iterate
            through an iterable. It will then give you the key value and create an
            object called the `IterationInfo` The `IterationInfo` is an object that
            gives it's user and infromation related to the current iteration.
          </p>

          <Code
            lang={"tsx"}
            wrap
            code={`<For of={iterable}>{(value, key, info: IterationInfo) => unknown}</For>`}
            wrap
          />
          <Center gap="gap-4">
            <div class="font-bold">
              The `IterationInfo` is an object that holds this list of
              infromation
            </div>
            <p>
              - The current iteration - Whether it's the first iteration -
              Whether it's the last iteration - Whether it's an odd iteration -
              Whether it's an even iteration - Total amount of iterations
            </p>
          </Center>
        </div>
      </Container>

      <Container>
        <div class="flex gap-6 justify-center flex-wrap">
          <For of={names}>
            {
              (value: string, key: number, info: IterationInfo) => (
                <IterationInfoTable {...{ value, key, info }} />
              )
            }
          </For>
        </div>
      </Container>
    </div>
  </Section>

  <Section title="show">
    <Container>
      <div class="grid gap-6" data-content>
        <p>
          The {`<Show />`} component is one the will show something when a condition
          is true but. Hide something when a condition is false. You can use `cloak=`
          to tell this component. To let it exist in the DOM but hide it instead.
        </p>

        <Code
          lang={"tsx"}
          wrap
          code={`<Show when={unknown} cloak={boolean} />`}
        />

        <p>
          In The following example. there are elements that are supposed to
          exist but will not. Due to switch. The name James will not exist.
        </p>

        <For of={["Mack", "James", "Rudy"]}>
          {
            (value: string, _: number, info: IterationInfo) =>
              info.isLast ? `<div>${value}</div>` : `<div>${value},</div>`
          }
        </For>
      </div>
    </Container>
    <Container>
      <div class="grid gap-2">
        <For of={["Mack", "James", "Rudy"]}>
          {
            (value: string) => (
              <Show when={value !== "James"}>
                <div class=" before:content-['--'] before:text-gray-400 before:text-lg">
                  {value}
                </div>
              </Show>
            )
          }
        </For>
      </div>
    </Container>
  </Section>
  <Section title="hide">
    <Container>
      <div class="grid gap-6" data-content>
        <p>
          The {`<Hide />`} component hides something when it's condition is true.
          It has the same props as {`<Show />`} so that if an element must be hidden
          then it is instead not displayed.
        </p>
        <Code
          lang={"tsx"}
          wrap
          code={`<Hide when={unknown} cloak={true | undefined} />`}
        />
      </div>
    </Container>
    <Container>
      <p>
        The example below shows two that when a condition is met the something
        will be hidden. Lets say that there are a list of numbers from 1 to 10.
        If a number is odd then an element should be hidden if not then it
        should appear. I'll cloak the ones that are supposed to be hidden.
      </p>

      <div class="flex items-center space-between gap-4">
        <Range start={1} stop={10}>
          {
            (value: number, info: IterationInfo) => (
              <Hide when={info.isOdd} cloak>
                <div>{value}</div>
              </Hide>
            )
          }
        </Range>
      </div>
    </Container>
  </Section>

  <Section title="range">
    <p>
      The {`<Range />`} component is the one that prints out numbers based on two
      numbers. The `start=` and the `stop=` The start is the starting number the
      stop is the stop number. The step is the number that is used to determine whether
      or not the number should increase or decrease based on the previous numbers.
      You can't subtract unless the start is greater than stop. You can't add unless
      the start is less than stop. If you wish to subtract use a negative number.
      You are even given the `IterationInfo` as well.
    </p>

    <Code
      lang={"tsx"}
      wrap
      code={`<Range start={number} stop={number} step={number}>`}
    />

    <div class="flex items-center space-between gap-4">
      <Range start={1} stop={10}>
        {
          (value: number, info: IterationInfo) => (
            <Hide when={info.isOdd} cloak>
              <div>{value}</div>
            </Hide>
          )
        }
      </Range>
    </div>

    <div class="flex items-center space-between gap-4">
      <Range start={1} stop={10}>
        {
          (value: number, info: IterationInfo) => (
            <Show when={info.isOdd} cloak>
              <div>{value}</div>
            </Show>
          )
        }
      </Range>
    </div>
  </Section>
  <Section title="switch-and-case">
    <p>
      The {`<Switch/>`} component is a component that is used to evalutate whether
      or not a condition is true. The {`<Case />`} component is used along with it
      to make sure that an element will exist if the value inside of it is the same
      as the one inside of the {`<Case />`} You can also cloak the value as well.
    </p>

    <Center gap="gap-8">
      <Range start={1} stop={10}>
        {
          (value: number) => (
            <Switch of={value}>
              <Case of={value % 5}>
                <div>Got fives</div>
              </Case>
              <Case of={value % 3}>
                <div>Got threes</div>
              </Case>
              <Case default>
                <div>Got neither</div>
              </Case>
            </Switch>
          )
        }
      </Range>
    </Center>
  </Section>
</Demo>
