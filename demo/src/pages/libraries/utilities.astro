---
import {
  iterate,
  iterateRange,
  PageLink,
  Projector,
  range,
  Gap,
  DefineTemplate,
} from "@forastro/utilities";
import { Code } from "astro/components";
import IterationInfoTable from "demo/src/components/IterationInfoTable.astro";
import Demo from "demo/src/layouts/Demo.astro";
import Section from "../../components/Section.astro";
const names = ["Rich", "Manu", "Theo", "Mack"];
const allowedColors = [
  "black",
  "red",
  "green",
  "blue",
  "purple",
  "indigo",
  "orange",
  "yellow",
  "brown",
  "white",
] as const;
---

<DefineTemplate templateName="message">
  <span class="text-lg">I come from a template</span>
</DefineTemplate>

<Demo
  title=" Libraries__Utilities"
  description="This is the page for all utilities based things"
  sidebarTitle="Utilities"
  sidebarLinks={[
    "iterate",
    "iterate-range",
    "range",
    "execute-if",
    "execute-unless",
    "gap",
    "projector",
    "page-link",
  ]}
>
  <Section title={"iterate"}>
    <p>
      The <code>iterate()</code>
      <code>function</code> is a function that takes in an iterable. and a callback
      function. It will then iterate through the iterable. and pass the value, key
      and A class called the `IterationInfo()`.
    </p>

    <Code
      lang={"ts"}
      code={`iterate(value:unknown, info:IterationInfo,key:unknown )`}
    />

    <div class="grid gap-6">
      <strong>The Iteration info class contains the following things</strong>
      <ul role="list" class="grid gap-2">
        <li>The iteration</li>
        {
          iterate(["first", "last", "odd", "even"], (value) => (
            <li>
              Whether or not the iteration is{" "}
              <span class="capitalize">{value}</span>
            </li>
          ))
        }
        <li>How many iterations are remaining</li>
        <li>How many iterations are there</li>
      </ul>
    </div>

    <strong>
      Below is a list of tables that show's the information that is avaliable
      when iterating through names
    </strong>

    <div class="flex gap-8 flex-wrap">
      {
        iterate(names, (value, info, key) => (
          <IterationInfoTable {...{ value, key, info }} />
        ))
      }
    </div>
  </Section>
  <Section title={"range"}>
    <p>
      The <code>range()</code> is a function returns a series of numbers based on
      three numerical parameters. The <strong>start,stop,step</strong>. If start
      is greater than step and step is positive then each number will be added
      by the previous one until the stop is reached. If the opposite is true
      then the number will be subtracted till the final start is reached.
    </p>

    <div class="grid gap-4">
      <strong>Here is a demonstration of both</strong>
      <div class="flex gap-6">
        <code>range(1,10,2)</code>
        <div class="flex gap-2">
          {Array.from(range(1, 10, 2), (value) => <span>{value}</span>)}
        </div>
      </div>
      <div class="flex gap-6">
        <code>range(10,1,2)</code>
        <div class="flex gap-2">
          {Array.from(range(10, 1, -2), (value) => <span>{value}</span>)}
        </div>
      </div>
    </div>
  </Section>

  <Section title={"iterate range"}>
    <div class="grid gap-4">
      <p>
        The <code>iterateRange()</code> is a function that takes in a function and
        a an object of options. It will call the <a href="#range"
          >Range function</a
        >
        Behind the scenes and then return the values that was returned by the callback
        function. Unlinke the range function you can return anything. It also passes
        the current value and the
      </p>

      <div class="grid gap-6">
        <strong>Below is an example of how iterateRange works</strong>
        <div class="grid gap-4">
          <code class="text-xs">
            iterateRange&lpar;&lpar;value&rpar;&equals;&gt;
            &lt;span&gt;value&lt;&sol;span&gt;, &lbrace; start: 10, stop: 2,
            step: -2, &rbrace; &rpar;
          </code>
          <div class="flex gap-2">
            {
              iterateRange((value) => <span>{value}</span>, {
                start: 10,
                stop: 2,
                step: -2,
              })
            }
          </div>
        </div>
        <div class="grid gap-4">
          <code class="text-xs">
            iterateRange&lpar;&lpar;value&rpar;&equals;&gt;
            &lt;span&gt;value&lt;&sol;span&gt;, &lbrace; start: 10, stop: 20,
            step: 2, &rbrace; &rpar;
          </code>
          <div class="flex gap-2">
            {
              iterateRange((value) => <span>{value}</span>, {
                start: 10,
                stop: 20,
                step: 2,
              })
            }
          </div>
        </div>
      </div>
    </div>
  </Section>

  <Section title={"execute if"}>
    <p>
      The <code>executeIf()</code> is a function that takes two parameters a <strong
        >boolean</strong
      > and a <strong>callback function</strong>. If the condition is <code
        >true</code
      > then the callback will be called if not nothing will happen.
    </p>
    <Code lang={"ts"} code={`executeIf(value:boolean, callback:Function)`} />
  </Section>
  <Section title={"execute unless"}>
    <p>
      The <code>executeUnless()</code> is a function that takes two parameters a
      <strong>boolean</strong> and a <strong>callback function</strong>. If the
      condition is <code>true</code> then the callback will be called if not nothing
      will happen.
    </p>
    <Code
      lang={"ts"}
      code={`executeUnless(value:boolean, callback:Function)`}
    />
  </Section>
  <Section title={"gap"}>
    <div class="font-bold">
      The <code>{`<Gap/>`}</code> component is a component that takes in two props.
    </div>
    <ul>
      <li>The spaces</li>
      <li>The color</li>
    </ul>
    <ul>
      <li>The spaces are the amount of spaces taken</li>
      <li>
        The color is the choice from {
          iterate(allowedColors, (value, info) =>
            info.isLast ? value : `${value}, `
          )
        }.
      </li>
    </ul>

    <div class="grid gap-6">
      <strong
        >This is an example of gaps being created with the color options
        mentioned</strong
      >
      <div class="flex justify-center flex-wrap">
        {
          iterate(allowedColors, (value, info) => {
            return info.isLast ? (
              <div class="px-4 py-2">{value}</div>
            ) : (
              <>
                <div class="px-4 py-2">{value}</div>
                <Gap spaces={2} color={value} />
              </>
            );
          })
        }
      </div>
    </div>
  </Section>
  <Section title={"projector"}>
    <p>
      The <code>{`<Projector/>`}</code> component is a component that projects the
      content of a template inside of a html area. It does this by taking in a <code
        >templateName=</code
      > as a prop. When that happens the component will search for that template
      with the id then display it's contents.
    </p>

    <Code lang={"tsx"} code={`<Projector templateName={string} />`} />

    <div class="grid gap-6">
      <strong>This element will be displayed by The projector</strong>
      <Code
        lang={"html"}
        code={`    <template id="message">
        <span class="text-lg">
          I come from a template
        </span>
    </template>`}
        wrap
      />
    </div>
    <Projector templateName="message" />
  </Section>
  <Section title={"page link"}>
    <p>
      The <code>{`<PageLink />`}</code> component is a component that uses takes
      in a path. If the current page matches the path that on the page link a <code
        >`[aria-current="page"]`</code
      >
      will be applied to it and it will apply a default class that uses that selectors
      as it's class selector.
    </p>

    <Code lang={"tsx"} code={`<PageLink href={string} />`} />

    <PageLink href={Astro.url.pathname as `/${string}`}>
      Click to reload this page
    </PageLink>
  </Section>
</Demo>
