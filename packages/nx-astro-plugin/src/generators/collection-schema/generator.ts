import type { Tree } from '@nx/devkit';
import {
  readProjectConfiguration,
  formatFiles,
  joinPathFragments,
} from '@nx/devkit';
import { join } from 'node:path';
import { toKebab } from '../../utils/naming.js';

interface Schema {
  project: string;
  name: string; // collection name
}

export default async function generator(tree: Tree, options: Schema) {
  const proj = readProjectConfiguration(tree, options.project);
  const collection = toKebab(options.name);
  const dir = joinPathFragments(proj.root, 'src', 'content', collection);
  const filePath = join(dir, 'config.ts');

  if (!tree.exists(filePath)) {
    const contents = `import { z, defineCollection } from 'astro:content';\n\n// Generated by @forastro/nx-astro-plugin:collection-schema\nexport const ${collection} = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string().optional(),\n    published: z.boolean().default(true),\n    date: z.string().optional()\n  })\n});\n\nexport default { ${collection}: ${collection} };\n`;
    tree.write(filePath, contents);
  }

  await formatFiles(tree);
}