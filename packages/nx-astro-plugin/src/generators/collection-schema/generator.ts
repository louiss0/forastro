import type { Tree } from '@nx/devkit';
import {
  readProjectConfiguration,
  formatFiles,
  joinPathFragments,
} from '@nx/devkit';
import { join } from 'node:path';
import { toKebab } from '../../utils/naming.js';

interface Schema {
  project: string;
  name: string; // collection name
}

/**
 * Generates a content collection schema configuration file.
 *
 * This generator creates a config.ts file for a new content collection
 * with a basic Zod schema. The collection directory and config file are
 * created if they don't exist. This provides type-safe content collections
 * with frontmatter validation.
 *
 * @param tree - Nx virtual file system tree for staging file changes
 * @param options - Collection schema generator options from schema.json
 * @param options.project - Name of the Nx project
 * @param options.name - Name of the content collection (will be converted to kebab-case)
 * @returns Promise that resolves when the schema file is created and formatted
 *
 * @example
 * // Create a new 'posts' collection schema
 * nx g @forastro/nx-astro-plugin:collection-schema --project=my-site --name=posts
 * // Creates: src/content/posts/config.ts
 *
 * @example
 * // Create a 'docs' collection schema
 * nx g @forastro/nx-astro-plugin:collection-schema --project=my-site --name=docs
 * // Creates: src/content/docs/config.ts with basic schema
 *
 * @remarks
 * The generated schema includes:
 * - title: string (required)
 * - description: string (optional)
 * - published: boolean (default: true)
 * - date: string (optional)
 *
 * Files are not overwritten if they already exist.
 */
export default async function generator(tree: Tree, options: Schema) {
  const proj = readProjectConfiguration(tree, options.project);
  const collection = toKebab(options.name);
  const dir = joinPathFragments(proj.root, 'src', 'content', collection);
  const filePath = join(dir, 'config.ts');

  if (!tree.exists(filePath)) {
    const contents = `import { z, defineCollection } from 'astro:content';\n\n// Generated by @forastro/nx-astro-plugin:collection-schema\nexport const ${collection} = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string().optional(),\n    published: z.boolean().default(true),\n    date: z.string().optional()\n  })\n});\n\nexport default { ${collection}: ${collection} };\n`;
    tree.write(filePath, contents);
  }

  await formatFiles(tree);
}
