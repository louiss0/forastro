import type { Tree } from '@nx/devkit';
import {
  readProjectConfiguration,
  formatFiles,
  joinPathFragments,
} from '@nx/devkit';
import { join } from 'node:path';
import { toPascal } from '../../utils/naming.js';

interface Schema {
  project: string;
  name: string;
  directory?: string;
  type?: 'base' | 'blog' | 'docs' | 'marketing';
}

type LayoutType = Schema['type'];

function generateBaseLayout(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:layout
export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
}

const {
  title = 'My Astro Site',
  description = 'Built with Astro',
  ogImage = '/og-image.jpg',
  canonicalURL = Astro.url.pathname,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <slot />
  </body>
</html>
`;
}

function generateBlogLayout(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:layout
import { type CollectionEntry } from 'astro:content';

export interface Props {
  entry: CollectionEntry<'blog'>;
}

const { entry } = Astro.props;
const { title, description, pubDate, author, heroImage } = entry.data;
const ogImage = heroImage || '/og-image.jpg';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={Astro.url.pathname} />
    <meta name="author" content={author} />
    <meta name="publish-date" content={pubDate.toISOString()} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    <meta property="article:published_time" content={pubDate.toISOString()} />
    <meta property="article:author" content={author} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <article>
      <header>
        <h1>{title}</h1>
        {heroImage && <img src={heroImage} alt={title} />}
        <p class="meta">
          <time datetime={pubDate.toISOString()}>
            {pubDate.toLocaleDateString('en-us', { year: 'numeric', month: 'long', day: 'numeric' })}
          </time>
          {author && <span class="author">by {author}</span>}
        </p>
      </header>
      <slot />
    </article>
  </body>
</html>
`;
}

function generateDocsLayout(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:layout
export interface Props {
  title: string;
  description?: string;
  section?: string;
  previousPage?: { title: string; url: string };
  nextPage?: { title: string; url: string };
}

const {
  title,
  description = '',
  section = 'Documentation',
  previousPage,
  nextPage,
} = Astro.props;
const ogImage = '/og-docs.jpg';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title} | {section}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={Astro.url.pathname} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={\`\${title} | \${section}\`} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={\`\${title} | \${section}\`} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <div class="docs-layout">
      <aside class="sidebar">
        <!-- TODO: Add navigation sidebar -->
        <nav>
          <slot name="sidebar" />
        </nav>
      </aside>
      <main>
        <article>
          <header>
            <div class="breadcrumb">{section}</div>
            <h1>{title}</h1>
            {description && <p class="lead">{description}</p>}
          </header>
          <slot />
          <footer class="page-navigation">
            {previousPage && (
              <a href={previousPage.url} class="previous">
                ← {previousPage.title}
              </a>
            )}
            {nextPage && (
              <a href={nextPage.url} class="next">
                {nextPage.title} →
              </a>
            )}
          </footer>
        </article>
      </main>
      <aside class="toc">
        <!-- TODO: Add table of contents -->
        <slot name="toc" />
      </aside>
    </div>
  </body>
</html>
`;
}

function generateMarketingLayout(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:layout
export interface Props {
  title: string;
  description: string;
  heroTitle?: string;
  heroSubtitle?: string;
  ogImage?: string;
  noIndex?: boolean;
}

const {
  title,
  description,
  heroTitle,
  heroSubtitle,
  ogImage = '/og-marketing.jpg',
  noIndex = false,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={Astro.url.pathname} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url)} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <header>
      <!-- TODO: Add navigation -->
      <slot name="header" />
    </header>
    {(heroTitle || heroSubtitle) && (
      <section class="hero">
        {heroTitle && <h1>{heroTitle}</h1>}
        {heroSubtitle && <p class="subtitle">{heroSubtitle}</p>}
        <slot name="hero-cta" />
      </section>
    )}
    <main>
      <slot />
    </main>
    <footer>
      <!-- TODO: Add footer -->
      <slot name="footer" />
    </footer>
  </body>
</html>
`;
}

/**
 * Generate an Astro layout with SEO support.
 *
 * Creates a new layout file with proper HTML structure, SEO meta tags,
 * and TypeScript Props interface. Supports multiple layout types optimized
 * for different use cases.
 *
 * @param tree - Nx virtual file system tree
 * @param options - Layout generation options
 * @param options.project - Name of the Nx project
 * @param options.name - Name of the layout (will be converted to PascalCase)
 * @param options.directory - Optional subdirectory under src/layouts
 * @param options.type - Layout type: 'base', 'blog', 'docs', or 'marketing' (default: 'base')
 *
 * @example
 * // Generate a base layout with SEO support
 * await generator(tree, {
 *   project: 'my-site',
 *   name: 'Base',
 *   type: 'base'
 * });
 * // Creates: src/layouts/Base.astro with SEO meta tags
 *
 * @example
 * // Generate a blog post layout
 * await generator(tree, {
 *   project: 'my-site',
 *   name: 'BlogPost',
 *   type: 'blog'
 * });
 * // Creates: src/layouts/BlogPost.astro with article schema
 */
export default async function generator(tree: Tree, options: Schema) {
  const proj = readProjectConfiguration(tree, options.project);
  const layoutName = toPascal(options.name);
  const layoutType = options.type || 'base';
  const baseDir = options.directory
    ? options.directory.replace(/\\/g, '/')
    : '';
  const targetDir = joinPathFragments(proj.root, 'src', 'layouts', baseDir);
  const filePath = join(targetDir, `${layoutName}.astro`);

  if (!tree.exists(filePath)) {
    let contents: string;
    switch (layoutType) {
      case 'blog':
        contents = generateBlogLayout(layoutName);
        break;
      case 'docs':
        contents = generateDocsLayout(layoutName);
        break;
      case 'marketing':
        contents = generateMarketingLayout(layoutName);
        break;
      default:
        contents = generateBaseLayout(layoutName);
    }
    tree.write(filePath, contents);
  }

  await formatFiles(tree);
}
