import { describe, it, expect, vi, beforeEach } from 'vitest';
import type { Tree, ProjectConfiguration } from '@nx/devkit';
import generator from './generator.js';
import * as devkit from '@nx/devkit';
import * as astroUtils from '../../utils/astro.js';

vi.mock('@nx/devkit', async () => {
  const actual = await vi.importActual<typeof devkit>('@nx/devkit');
  return {
    ...actual,
    readProjectConfiguration: vi.fn(),
    joinPathFragments: actual.joinPathFragments,
    formatFiles: vi.fn(),
  };
});

vi.mock('../../utils/astro.js', () => ({
  parseAstroConfigDirs: vi.fn(),
}));

describe('page generator', () => {
  let tree: Tree;
  const mockReadProjectConfiguration = vi.mocked(
    devkit.readProjectConfiguration,
  );
  const mockFormatFiles = vi.mocked(devkit.formatFiles);
  const mockParseAstroConfigDirs = vi.mocked(astroUtils.parseAstroConfigDirs);

  const writeSpy = vi.fn<[string, string], void>();

  beforeEach(() => {
    writeSpy.mockReset();
    tree = {
      root: '/workspace',
      exists: vi
        .fn<[string], boolean>()
        .mockReturnValue(false) as unknown as Tree['exists'],
      write: writeSpy as unknown as Tree['write'],
      read: vi.fn<
        [string, string?],
        string | null
      >() as unknown as Tree['read'],
    } as unknown as Tree;

    mockReadProjectConfiguration.mockReturnValue({
      root: 'apps/site',
      name: 'site',
    } as unknown as ProjectConfiguration);

    mockParseAstroConfigDirs.mockReturnValue({
      srcDir: 'src',
      pagesDir: 'src/pages',
      contentDir: 'src/content',
    });
  });

  describe('static pages', () => {
    it('creates a static page file at src/pages/<name>.astro', async () => {
      await generator(tree, { project: 'site', name: 'Home', type: 'static' });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('apps/site/src/pages/home.astro');
      expect(mockFormatFiles).toHaveBeenCalled();

      const content = call[1];
      expect(content).toContain('---');
      expect(content).toContain(
        '// Generated by @forastro/nx-astro-plugin:page (static)',
      );
      expect(content).toContain('<h1>{title}</h1>');
    });

    it('defaults to static type when not specified', async () => {
      await generator(tree, { project: 'site', name: 'About' });

      const call = writeSpy.mock.calls[0];
      const content = call[1];
      expect(content).toContain(
        '// Generated by @forastro/nx-astro-plugin:page (static)',
      );
    });

    it('supports directory option under src/pages', async () => {
      await generator(tree, {
        project: 'site',
        name: 'About Us',
        directory: 'company',
      });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('apps/site/src/pages/company/about-us.astro');
    });

    it('uses custom srcDir from astro config', async () => {
      mockParseAstroConfigDirs.mockReturnValue({
        srcDir: 'app',
        pagesDir: 'app/pages',
        contentDir: 'app/content',
      });

      await generator(tree, { project: 'site', name: 'Home' });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('apps/site/app/pages/home.astro');
    });
  });

  describe('dynamic pages', () => {
    it('creates a dynamic page with getStaticPaths', async () => {
      await generator(tree, { project: 'site', name: 'slug', type: 'dynamic' });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      const content = call[1];

      expect(path).toContain('apps/site/src/pages/[slug].astro');
      expect(content).toContain(
        '// Generated by @forastro/nx-astro-plugin:page (dynamic)',
      );
      expect(content).toContain(
        "import { getCollection } from 'astro:content'",
      );
      expect(content).toContain('export async function getStaticPaths()');
      expect(content).toContain('params: { slug: entry.slug }');
      expect(content).toContain('const { entry } = Astro.props');
    });

    it('wraps page name in brackets for dynamic pages', async () => {
      await generator(tree, {
        project: 'site',
        name: 'post-id',
        type: 'dynamic',
      });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('[post-id].astro');
    });

    it('supports directory option for dynamic pages', async () => {
      await generator(tree, {
        project: 'site',
        name: 'id',
        type: 'dynamic',
        directory: 'blog',
      });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('apps/site/src/pages/blog/[id].astro');
    });

    it('uses custom srcDir for dynamic pages', async () => {
      mockParseAstroConfigDirs.mockReturnValue({
        srcDir: 'app',
        pagesDir: 'app/pages',
        contentDir: 'app/content',
      });

      await generator(tree, { project: 'site', name: 'slug', type: 'dynamic' });

      const call = writeSpy.mock.calls[0];
      const path = call[0].replace(/\\/g, '/');
      expect(path).toContain('apps/site/app/pages/[slug].astro');
    });
  });
});
