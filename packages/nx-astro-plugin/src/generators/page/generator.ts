import type { Tree } from '@nx/devkit';
import {
  readProjectConfiguration,
  formatFiles,
  joinPathFragments,
} from '@nx/devkit';
import { join } from 'node:path';
import { parseAstroConfigDirs } from '../../utils/astro.js';

interface Schema {
  project: string;
  name: string;
  directory?: string;
  type?: 'static' | 'dynamic';
}

const toKebab = (s: string) =>
  s
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');

function generateStaticPage(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:page (static)
const title = "${name}";
---

<div>
  <!-- TODO: Add your page content here -->
  <h1>{title}</h1>
</div>
`;
}

function generateDynamicPage(name: string): string {
  const paramName = toKebab(name);
  return `---
// Generated by @forastro/nx-astro-plugin:page (dynamic)
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  // TODO: Change 'posts' to your target collection name
  const entries = await getCollection('posts');
  return entries.map(entry => ({
    params: { ${paramName}: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
---

<div>
  <!-- TODO: Render your entry data here -->
  <h1>{entry.data.title}</h1>
  <p>{entry.data.description}</p>
  <!-- Access entry.body for markdown content -->
</div>
`;
}

export default async function generator(tree: Tree, options: Schema) {
  const proj = readProjectConfiguration(tree, options.project);
  const pageType = options.type || 'static';

  // Parse Astro config to get pagesDir
  const { pagesDir } = parseAstroConfigDirs(proj.root);

  let pageName = toKebab(options.name);

  // For dynamic pages, ensure brackets around param name
  if (pageType === 'dynamic' && !pageName.includes('[')) {
    pageName = `[${pageName}]`;
  }

  const baseDir = options.directory
    ? options.directory.replace(/\\/g, '/')
    : '';
  const targetDir = joinPathFragments(proj.root, pagesDir, baseDir);
  const filePath = join(targetDir, `${pageName}.astro`);

  if (!tree.exists(filePath)) {
    const contents =
      pageType === 'dynamic'
        ? generateDynamicPage(options.name)
        : generateStaticPage(options.name);
    tree.write(filePath, contents);
  }

  await formatFiles(tree);
}
