import type { Tree } from '@nx/devkit';
import {
  readProjectConfiguration,
  formatFiles,
  joinPathFragments,
} from '@nx/devkit';
import { join } from 'node:path';
import { parseAstroConfigDirs } from '../../utils/astro.js';
import { toKebab } from '../../utils/naming.js';

interface Schema {
  project: string;
  name: string;
  directory?: string;
  type?: 'static' | 'dynamic';
}

function generateStaticPage(name: string): string {
  return `---
// Generated by @forastro/nx-astro-plugin:page (static)
const title = "${name}";
---

<div>
  <!-- TODO: Add your page content here -->
  <h1>{title}</h1>
</div>
`;
}

function generateDynamicPage(name: string): string {
  const paramName = toKebab(name);
  return `---
// Generated by @forastro/nx-astro-plugin:page (dynamic)
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  // TODO: Change 'posts' to your target collection name
  const entries = await getCollection('posts');
  return entries.map(entry => ({
    params: { ${paramName}: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
---

<div>
  <!-- TODO: Render your entry data here -->
  <h1>{entry.data.title}</h1>
  <p>{entry.data.description}</p>
  <!-- Access entry.body for markdown content -->
</div>
`;
}

/**
 * Generate an Astro page (static or dynamic).
 *
 * Creates a new page in the Astro project's pages directory. Supports both static
 * pages and dynamic pages with getStaticPaths for content collections.
 *
 * @param tree - Nx virtual file system tree
 * @param options - Page generation options
 * @param options.project - Name of the Nx project
 * @param options.name - Name of the page (will be converted to kebab-case)
 * @param options.directory - Optional subdirectory under src/pages
 * @param options.type - Page type: 'static' (default) or 'dynamic'
 *
 * @example
 * // Generate a static about page
 * await generator(tree, {
 *   project: 'my-site',
 *   name: 'About Us',
 *   type: 'static'
 * });
 * // Creates: src/pages/about-us.astro
 *
 * @example
 * // Generate a dynamic page with getStaticPaths
 * await generator(tree, {
 *   project: 'my-site',
 *   name: 'slug',
 *   type: 'dynamic'
 * });
 * // Creates: src/pages/[slug].astro with getStaticPaths()
 */
export default async function generator(tree: Tree, options: Schema) {
  const proj = readProjectConfiguration(tree, options.project);
  const pageType = options.type || 'static';

  // Parse Astro config to get pagesDir
  const { pagesDir } = parseAstroConfigDirs(proj.root);

  let pageName = toKebab(options.name);

  // For dynamic pages, ensure brackets around param name
  if (pageType === 'dynamic' && !pageName.includes('[')) {
    pageName = `[${pageName}]`;
  }

  const baseDir = options.directory
    ? options.directory.replace(/\\/g, '/')
    : '';
  const targetDir = joinPathFragments(proj.root, pagesDir, baseDir);
  const filePath = join(targetDir, `${pageName}.astro`);

  if (!tree.exists(filePath)) {
    const contents =
      pageType === 'dynamic'
        ? generateDynamicPage(options.name)
        : generateStaticPage(options.name);
    tree.write(filePath, contents);
  }

  await formatFiles(tree);
}
