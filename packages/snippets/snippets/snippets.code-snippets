/* 

"Template ": {
        "prefix": "",
        "description": "",
        "isFileTemplate": false,
        "body": [
            "",
            ""
        ],
    },

*/
{
    

    "Immediately Invoked Function Expression ": {
        "prefix": "a-iife",
        "description": "This is an immediately invoked function expression",
        "isFileTemplate": false,
        "body": [
         "{(()=> {",
            "",
         "${1}",
            "",
        "})()}"
        ],
    },
    
    
    "Immediately Invoked Generator Expression":{
        "body": [
        "{(function* () {",
         "for(let ${0:item} of ${0:item}s) {",
        "${1}",
        "}",
        "})()}"
        ],
        "prefix": "a-iige",
        "description": "This is an generator expression"
    },

    "Astro Base": {
        "prefix": "a-base",
        "description": "This is a basic scaffold for a component in Astro",
        "isFileTemplate": true,
        "body": [
        "---",
        "${3}",   
        "---",
        "<${1:div}>",
        " ",
        "</${1:div}>",
        " ",
        "<style>${2}</style>",
        ],
    },


    "Astro Client Script Base": {
        "prefix": "a-cbase",
        "description": "Astro Single File Component w Client Script",
        "isFileTemplate": true,
        "body": [
        "<${0:div}>",
        "</${0:div}>",
        "",
        "<style>${1}</style>",
        "",
        "<script>",
        "",
        "</script>",
        ],
    },


    "Header Main Footer Component ": {
        "prefix": "a-base-hmf",
        "description": "This is a header footer main snippet",
        "isFileTemplate": true,
        "body": [
            "---",
            "${5}",
            "---",
            "",
            "",
            "<!DOCTYPE html>",
            "<html lang='en'>",
                "<head>",
                    "<meta charset='UTF-8' />",
                    "<meta http-equiv='X-UA-Compatible' content='IE=edge' />",
                    "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",
                    "<title>Document</title>",
                "</head>",
                "<body>",
                "<header>",
                "${1}",
                "</header>",
                "<main>",
                "${2}",
                "</main>",
                "<footer>",
                "${3}",
                "</footer>",
                "</body>",
            "</html>",
            "",
            "<style>${4}</style>",
            "",
        ],
    },


    "Fragment Set HTML": {
        "prefix": "a-frag-html",
        "description": "This is a fragment with set html",
        "isFileTemplate": false,
        "body": [
            "<Fragment set:html={${0}} />"
            
        ],
    },


    "Fragment Slot Name": {
        "prefix": "a-frag-slot",
        "description": "This is a fragment with a slot name in it",
        "isFileTemplate": false,
        "body": [
            "<Fragment slot='${1}'>",
                "${2}",
            "</Fragment>",
        ],
    },


    "Pre-rendered Page": {
        "prefix": "a-base-prpg",
        "description": "This is a pre-rendered page snippet",
        "isFileTemplate": false,
        "body": [
            "---",
            "export const prerender = true",
            "",
            "---",
            
            "<${1:div}>",
            "",
            "</${1:div}>",
            "<style>",
            "${2}", 
            "</style>",
        ],
    },


    "Pre rendered Page with getStaticPaths": {
        "prefix": "a-base-prpg-gsp",
        "description": "This is a pre-rendered page with getStaticPaths Setup",
        "isFileTemplate": true,
        "body": [
            "---",
            "import { InferGetStaticParamsType, InferGetStaticPropsType } from \"astro\"",
            "",
            "export const prerender = true",
            "",
            "",
            "",
            "",
            "",
            "export const getStaticPaths = async () => {",
            "",
            
            "${2}",
            "",            
            "return [",
                "{",
                "params: {},",
                "props:{},",
                "}",
            "]",
            
            "}",
            
    "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
    "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
            
            "",
            "",
            "",
            "const {${3}} = Astro.props  as Props",
            
            "---",
            
            "<${1:div}>",
            
            "</${1:div}>",
        ],
    },



    "Page with getStaticPaths": {
        "prefix": "a-base-gsp",
        "description": "This is a page snippet with getStaticPaths",
        "isFileTemplate": false,
        "body": [
            "---",
            "import { InferGetStaticParamsType, InferGetStaticPropsType } from \"astro\"",
            "export const getStaticPaths = async ({}) => {",
            
            "${2}",
            
            "return [",
                "{",
                "params: {},",
                "props:{},",
            "}",
            
            "]",
            
            "}",
            
            "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
            
            "const {${3}} = Astro.props ",
            "const {${4}} = Astro.params",
            
            "---",
        
            "<${1:div}>",
            
            "</${1:div}>",
            ""
        ],
    },


    "Astro Component": {
        "prefix": "a-base-cmp",
        "description": "This is a basic Astro component",
        "isFileTemplate": true,
        "body": [
            "---",
            "",
            "type Props = {",
                "${2}",
            "}",
            "",
            "",
            
            "",
            "const {${3}} = Astro.props",  
            "",
            
            "---",
            "",
            
            "<${1:div}>",
            "",
            
            "",
            
            "",
            
            "</${1:div}>",
            
            "",
            "",
            
            "<style>${4}</style>",
            "",
            ""
        ],
    },


    "Astro Component with Client Script": {
        "prefix": "a-base-cmp-csc",
        "description": "This is an Astro component with a client script",
        "isFileTemplate": true,
        "body": [
            "---",
            "",
            "type Props = {",
                "${3}",
            "}",
            "",
            "",
            
            "",
            "const {${4}} = Astro.props",  
            "",
            
            "---",
            "",
            
            "<${2:div}>",
            "",
            
            "",
            
            "",
            
            "</${2:div}>",
            
            "",
            "",
            
            "<style>${1}</style>",
            
            "<script>${5}</script>",
            ""
        ],
    },



    "Layout Page": {
        "prefix": "a-base-lpg",
        "description": "This a page with layout scaffold",
        "isFileTemplate": true,
        "body": [
            "---",
            "${4}",
            "---",
            "",
            "<${1:Layout}>",
                "${2}",
            "</${1:Layout}>",
            "",
           "<style>${3}</style>",
            "",
        ],
    },


    "Layout Page with Header and Footer slot": {
        "prefix": "a-base-hf-slots",
        "description": "The is a scaffold for a Layout Page with a header and footer slot and main as default slot",
        "isFileTemplate": false,
        "body": [
            "---",
            "${5}",
            "---",
            "",
            "<${1:Layout}>",
            "<slot name='header'>",
                "${2}",
            "</slot>",
            "${3}",
            "<slot name='footer'>",
                "${4}",
            "</slot>",
            "</${1:Layout}>"
        ],
    },


    "Content Collections Page with getStaticPaths": {
        "prefix": "a-base-gc-gsp",
        "description": "Scaffold for Get Collections With getStaticPaths",
        "isFileTemplate": true,

        "body": [
        "---",
        "import { getCollection, CollectionEntry } from 'astro:content';",
        "",
        "import { InferGetStaticParamsType, InferGetStaticPropsType } from \"astro\"",
        "export async function getStaticPaths() {",
        "",
        "const ${2:docs} = await getCollection('${1:docs}');",
        "",
        "",
        "return ${2:docs}.map(entry => ({",
        "",
        "",
        
            "params: { slug: entry.slug }, props: { entry }",
        "}));",
        "}",
        "",
    "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
    "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
        "",        
        "",        
    "const {${3}} = Astro.props ",
    "const {${4}} = Astro.params",
    "const { Content } = await entry.render()",
        "---",
        "",
        "",
        "<h1>{entry.data.title}</h1>",
        "<article>", 
        "<Content />",
        "</article>", 
        "",
        "<style>${3}</style>",
        ],
    },

    "Astro base with Define Vars Script ": {
        "prefix": "a-cbase-dvsc",
        "description": "This is basic scaffold with define vars for script",
        "isFileTemplate": true,
        "body": [
        "<${1:div}>",
        " ",
        "</${1:div}>",
        " ",
        "<style>",
        "${4}",
        "</style>",
        "<script define:vars={${2}}>${3}</script>"

        ],
    },


    "Astro base with Define Vars Style": {
        "prefix": "a-cbase-dvst",
        "description": "This is basic scaffold with define vars for style",
        "isFileTemplate": true,
        "body": [
        "<${1:div}>",
        "",
        "</${1:div}>",
        "",
        "<style define:vars={${2}}>${3}</style>",
        "",
        "<script> ${4} </script>"

        ],
    },
    
    
    "Map Expression ": {
        "prefix": "a-map",
        "description": "This is a simple map expression for Astro",
        "isFileTemplate": false,
        "body": [
            "{ ${1:item}s.map((${1:item}) => ${2:item} }) }",
        ],
    },
    
    "Map Expression Using a Block": {
        "prefix": "a-map-ft",
        "description": "This is a map expression for Astro using a anonymous function",
        "isFileTemplate": false,
        "body": [
        "{",
            
            "${1:item}s.map((${1:item}) =>{",
            
            " return ${2:item}",
            
            "})",
            
            "}",

        ],
    },
    
    
    "Ternary Expression": {
        "prefix": "a-tern",
        "description": "A ternary expression scaffold",
        "isFileTemplate": false,
        "body": [
            "{ ${1:expression} ? ${2} : ${3:null} }",
        ],
    },


    "Fragment Slot with Function Expression": {
        "prefix": "a-slot-ft",
        "description": "A fragment slot with a function to return HTML",
        "isFileTemplate": false,
        "body": [
            "<${2:div} slot=${1}>",
            "{", 
            "",
            "()=> (${3}",  
            "",
            ")}",
            "</${2:div}>",

        ],
    },

    
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // }
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
    // "Template ": {
    //     "prefix": "",
    //     "description": "",
    //     "isFileTemplate": false,
    //     "body": [
    //         "",
    //         ""
    //     ],
    // },
}