---
type AllowedColors =
  | 'red'
  | 'green'
  | 'blue'
  | 'purple'
  | 'black'
  | 'indigo'
  | 'orange'
  | 'yellow'
  | 'brown'
  | 'white';

export interface Props {
  spaces: number;
  color?: AllowedColors;
}

const { spaces, color = '' } = Astro.props;
---

<div
  data-forastro-element="gap"
  data-forastro-spaces={spaces}
  data-forastro-color={color}
>
  <!--gap  -->
</div>

<script>
  {
    const dataGapSelector = "[data-forastro-element='gap']";

    const gaps = document.querySelectorAll<HTMLElement>(dataGapSelector);

    gaps.forEach(function (gap) {
      const [spaces, color] = [
        Number(gap.getAttribute('data-forastro-spaces')),
        gap.getAttribute('data-forastro-color')!,
      ];

      const gapParentElement = gap.parentElement!;

      const parentElementStyle = getComputedStyle(gapParentElement);

      const { nextElementSibling, previousElementSibling } = gap;

      gap.setAttribute(
        'data-forastro-element',
        `gap${Math.ceil(Math.random() * Date.now())}`,
      );

      throwErrorIfThereisNoPreviousElement(
        previousElementSibling,
        gap.dataset['id'] as string,
      );

      throwErrorIfThereIsNoNextElement(
        nextElementSibling,
        gap.dataset['id'] as string,
      );

      throwErrorIfAPreviousElementSiblingOrANextElementSiblingHasADataId(
        previousElementSibling,
        gap,
        nextElementSibling,
      );

      changeElementWidthIfTheParentElementFulfilsTheseConditions(
        parentElementStyle,
        gap,
        spaces,
      );

      changeElementHeightIfTheParentElementFulfilsTheseConditions(
        parentElementStyle,
        gap,
        spaces,
      );

      gap.style.backgroundColor = color;
    });

    function changeElementWidthIfTheParentElementFulfilsTheseConditions(
      parentElementStyle: CSSStyleDeclaration,
      element: HTMLElement,
      spaces: number,
    ) {
      const {
        display: parentElementDisplay,
        gridAutoFlow: parentElementGridAutoFlow,
        flexDirection: parentElementFlexDirection,
      } = parentElementStyle;

      const parentElementsDisplayIsFlex = parentElementDisplay.includes('flex');

      const parentElementsDisplayIsGrid = parentElementDisplay.includes('grid');

      const parentElementsDisplayIsInline =
        parentElementDisplay.includes('inline');

      const parentElementStyleFlexDirectionIsRow =
        parentElementFlexDirection.includes('row');

      const parentElementStyleGridAutoFlowIsColumn =
        parentElementGridAutoFlow.includes('column');

      const anyOfTheConditionsRequiredToSetTheWidthOfTheElementAreTrue = [
        parentElementsDisplayIsInline,
        parentElementsDisplayIsFlex && parentElementStyleFlexDirectionIsRow,
        parentElementsDisplayIsGrid && parentElementStyleGridAutoFlowIsColumn,
      ].some((value) => value === true);

      if (anyOfTheConditionsRequiredToSetTheWidthOfTheElementAreTrue) {
        element.style.width = `${spaces}em`;
        element.style.height = 'auto';
      }
    }

    function changeElementHeightIfTheParentElementFulfilsTheseConditions(
      parentElementStyle: CSSStyleDeclaration,
      element: HTMLElement,
      spaces: number,
    ) {
      const {
        display: parentElementDisplay,
        gridAutoFlow: parentElementGridAutoFlow,
        flexDirection: parentElementFlexDirection,
      } = parentElementStyle;

      const parentElementsDisplayIsFlex = parentElementDisplay.includes('flex');

      const parentElementsDisplayIsBlock =
        parentElementDisplay.includes('block');

      const parentElementsDisplayIsFlowRoot =
        parentElementDisplay.includes('flow-root');

      const parentElementsDisplayIsGrid = parentElementDisplay.includes('grid');

      const parentElementStyleFlexDirectionIsColumn =
        parentElementFlexDirection.includes('column');

      const parentElementStyleGridAutoFlowIsRow =
        parentElementGridAutoFlow.includes('row');

      const anyOfTheConditionsRequiredToSetTheHeightOfTheElementAreTrue = [
        parentElementsDisplayIsBlock,
        parentElementsDisplayIsFlowRoot,
        parentElementsDisplayIsGrid && parentElementStyleGridAutoFlowIsRow,
        parentElementsDisplayIsFlex && parentElementStyleFlexDirectionIsColumn,
      ].some((value) => value === true);

      if (anyOfTheConditionsRequiredToSetTheHeightOfTheElementAreTrue) {
        element.style.width = 'auto';
        element.style.height = `${spaces}em`;
      }
    }

    function throwErrorIfThereIsNoNextElement(
      nextElementSibling: Element | null,
      id: string,
    ): asserts nextElementSibling is Element;

    function throwErrorIfThereIsNoNextElement(
      nextElementSibling: Element | null,
      id: string,
    ) {
      if (!nextElementSibling) {
        throw new Error(
          `A gap must exist between two elements check for ${id} `,
        );
      }
    }

    function throwErrorIfThereisNoPreviousElement(
      previousElementSibling: Element | null,
      id: string,
    ): asserts previousElementSibling is Element;

    function throwErrorIfThereisNoPreviousElement(
      previousElementSibling: Element | null,
      id: string,
    ) {
      if (!previousElementSibling) {
        throw new Error(
          `A gap must exist between two elements check for ${id} `,
        );
      }
    }

    function throwErrorIfAPreviousElementSiblingOrANextElementSiblingHasADataId(
      previousElementSibling: Element,
      element: Element,
      nextElementSibling: Element,
    ) {
      const previousElementOrNextElementHasADataIdOfGap =
        previousElementSibling.hasAttribute('data-forastro-element') ||
        nextElementSibling.hasAttribute('data-forastro-element');

      const previousElementSiblingDataId = previousElementSibling.getAttribute(
        'data-forastro-element',
      );

      const elementDataId = element.getAttribute('data-forastro-element');

      const nextElementSiblingDataId = nextElementSibling.getAttribute(
        'data-forastro-element',
      );

      if (previousElementOrNextElementHasADataIdOfGap) {
        throw new Error(
          `Two gaps cannot exist between each other , Check for these id's  ${previousElementSiblingDataId} ${elementDataId} ${nextElementSiblingDataId} `,
        );
      }
    }
  }
</script>
