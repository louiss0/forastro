{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "version": 2,
  "title": "Astro Component Generator",
  "description": "Generate a new reusable Astro component with TypeScript support",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the component to generate (PascalCase recommended)",
      "pattern": "^[A-Z][a-zA-Z0-9]*$",
      "minLength": 1,
      "maxLength": 50,
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the component?",
      "examples": ["Button", "Header", "UserCard", "NavigationMenu"]
    },
    "project": {
      "type": "string",
      "description": "The target project where the component will be created",
      "$default": {
        "$source": "projectName"
      },
      "x-prompt": "Which project should contain this component?",
      "x-dropdown": "projects"
    },
    "directory": {
      "type": "string",
      "description": "Subdirectory within src/components where the component will be placed",
      "pattern": "^[a-zA-Z0-9/_-]*$",
      "examples": ["ui", "layout", "forms", "navigation"]
    },
    "props": {
      "type": "string",
      "description": "TypeScript interface definition for component props",
      "pattern": "^[a-zA-Z][a-zA-Z0-9:,\\s\\{\\}\\[\\]\\|\\?]*$",
      "x-prompt": "Define component props (e.g., 'title: string, count?: number'):",
      "examples": [
        "title: string",
        "title: string, count: number",
        "data: { id: number; name: string }",
        "variant: 'primary' | 'secondary', disabled?: boolean"
      ]
    },
    "ext": {
      "type": "string",
      "description": "File extension format for the component",
      "enum": ["astro", "mdx"],
      "default": "astro",
      "x-prompt": {
        "message": "Which file format would you prefer?",
        "type": "list",
        "items": [
          { "value": "astro", "label": "astro - Standard Astro component" },
          { "value": "mdx", "label": "mdx - Markdown with JSX support" }
        ]
      }
    },
    "style": {
      "type": "string",
      "description": "CSS styling approach for the component",
      "enum": ["none", "scoped", "global"],
      "default": "scoped",
      "x-prompt": {
        "message": "How should styles be handled?",
        "type": "list",
        "items": [
          { "value": "scoped", "label": "scoped - Component-scoped CSS (recommended)" },
          { "value": "none", "label": "none - No CSS template" },
          { "value": "global", "label": "global - Global CSS styles" }
        ]
      }
    },
    "language": {
      "type": "string",
      "description": "Scripting language for component logic",
      "enum": ["ts", "js"],
      "default": "ts",
      "x-prompt": {
        "message": "Which scripting language?",
        "type": "list",
        "items": [
          { "value": "ts", "label": "ts - TypeScript (recommended)" },
          { "value": "js", "label": "js - JavaScript" }
        ]
      }
    },
    "skipFormat": {
      "type": "boolean",
      "description": "Skip automatic code formatting after component generation",
      "default": false
    }
  },
  "required": ["name", "project"],
  "additionalProperties": false
}
